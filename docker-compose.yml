version: '3.8'

services:
  # MongoDB
  mongodb:
    build:
      context: ./infrastructure/mongodb
      dockerfile: Dockerfile
    container_name: product-catalog-mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: product_catalog_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - product-catalog-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/product_catalog_db --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: product-catalog-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - product-catalog-network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: product-catalog-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - product-catalog-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka:29092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka UI (Optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: product-catalog-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8091:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: product-catalog
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - product-catalog-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Catalog Service
  product-service:
    build:
      context: ./backend
      dockerfile: product-service/Dockerfile
    container_name: product-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      workflow-service:
        condition: service_healthy
    ports:
      - "8082:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-admin123}@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8081
      MONGODB_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      WORKFLOW_SERVICE_USERNAME: ${WORKFLOW_SERVICE_USERNAME:-admin}
      WORKFLOW_SERVICE_PASSWORD: ${WORKFLOW_SERVICE_PASSWORD:-admin123}
    networks:
      - product-catalog-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Workflow Service
  workflow-service:
    build:
      context: ./backend
      dockerfile: workflow-service/Dockerfile
    container_name: workflow-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      temporal:
        condition: service_healthy
    ports:
      - "8089:8089"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-admin123}@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      TEMPORAL_CONNECTION_TARGET: temporal:7233
      SERVER_PORT: 8089
      MONGODB_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      SECURITY_USERNAME: ${SECURITY_USERNAME:-admin}
      SECURITY_PASSWORD: ${SECURITY_PASSWORD:-admin123}
      PRODUCT_SERVICE_USERNAME: ${PRODUCT_SERVICE_USERNAME:-admin}
      PRODUCT_SERVICE_PASSWORD: ${PRODUCT_SERVICE_PASSWORD:-admin123}
    networks:
      - product-catalog-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8089/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Notification Service
  notification-service:
    build:
      context: ./backend
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-admin123}@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8086
      MONGODB_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD:-admin123}
    networks:
      - product-catalog-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8086/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Version Service
  version-service:
    build:
      context: ./backend
      dockerfile: version-service/Dockerfile
    container_name: version-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-admin123}@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8090
      MONGODB_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD:-admin123}
    networks:
      - product-catalog-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8090/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL for Temporal
  temporal-postgres:
    image: postgres:15-alpine
    container_name: temporal-postgres
    environment:
      POSTGRES_PASSWORD: ${TEMPORAL_POSTGRES_PASSWORD:-temporal}
      POSTGRES_USER: ${TEMPORAL_POSTGRES_USER:-temporal}
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    networks:
      - product-catalog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: temporal-server
    depends_on:
      temporal-postgres:
        condition: service_healthy
    ports:
      - "7233:7233"
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${TEMPORAL_POSTGRES_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_POSTGRES_PASSWORD:-temporal}
      - POSTGRES_SEEDS=temporal-postgres
    networks:
      - product-catalog-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Temporal UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    container_name: temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    ports:
      - "8088:8080"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    networks:
      - product-catalog-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  product-catalog-network:
    driver: bridge

volumes:
  mongodb_data:
  temporal_postgres_data:
