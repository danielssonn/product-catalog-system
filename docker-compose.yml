version: '3.8'

services:
  # MongoDB
  mongodb:
    build:
      context: ./infrastructure/mongodb
      dockerfile: Dockerfile
    container_name: product-catalog-mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: product_catalog_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - product-catalog-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/product_catalog_db --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: product-catalog-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - product-catalog-network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: product-catalog-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - product-catalog-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka:29092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI (Optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: product-catalog-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: product-catalog
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - product-catalog-network

  # Catalog Service
  product-service:
    build:
      context: ./backend
      dockerfile: product-service/Dockerfile
    container_name: product-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8081
    networks:
      - product-catalog-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Bundle Service
  bundle-service:
    build:
      context: ./backend
      dockerfile: bundle-service/Dockerfile
    container_name: bundle-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8082
    networks:
      - product-catalog-network

  # Cross-Sell Service
  cross-sell-service:
    build:
      context: ./backend
      dockerfile: cross-sell-service/Dockerfile
    container_name: cross-sell-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8083
    networks:
      - product-catalog-network

  # Audit Service
  audit-service:
    build:
      context: ./backend
      dockerfile: audit-service/Dockerfile
    container_name: audit-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8084
    networks:
      - product-catalog-network

  # Event Publisher Service
  event-publisher-service:
    build:
      context: ./backend
      dockerfile: event-publisher-service/Dockerfile
    container_name: event-publisher-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8085
    networks:
      - product-catalog-network

  # Tenant Service
  tenant-service:
    build:
      context: ./backend
      dockerfile: tenant-service/Dockerfile
    container_name: tenant-service
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SERVER_PORT: 8086
    networks:
      - product-catalog-network

  # Version Service
  version-service:
    build:
      context: ./backend
      dockerfile: version-service/Dockerfile
    container_name: version-service
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/product_catalog_db?authSource=admin
      SERVER_PORT: 8087
    networks:
      - product-catalog-network

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - product-service
      - bundle-service
      - cross-sell-service
      - audit-service
      - tenant-service
      - version-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      PRODUCT_SERVICE_URL: http://product-service:8081
      BUNDLE_SERVICE_URL: http://bundle-service:8082
      CROSS_SELL_SERVICE_URL: http://cross-sell-service:8083
      AUDIT_SERVICE_URL: http://audit-service:8084
      EVENT_PUBLISHER_SERVICE_URL: http://event-publisher-service:8085
      TENANT_SERVICE_URL: http://tenant-service:8086
      VERSION_SERVICE_URL: http://version-service:8087
    networks:
      - product-catalog-network

networks:
  product-catalog-network:
    driver: bridge

volumes:
  mongodb_data:
